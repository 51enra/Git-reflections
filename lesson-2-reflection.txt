What happens when you initialize a repository? Why do you need to do it?
 I create the structure for git to perform version control. I don't yet
 start the version control, so no files are tracked until I explicitly tell git
 to do it.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

 I add both files to the staging area because there is no basis to compare against
 until all files I want to version control have been committed once.

How can you use the staging area to make sure you have one commit per logical
change?

 Even if I changed multiple files in the working directory, in case the changes are
 logically distinct, I can add them one by one to the staging area and do a separate
 commit each time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

 Trying out new features while I'm not sure they will make it to the main version.
 Having different flavors of the same application, e.g. for different OSes or
 different localizations.
 Keeping a stable version in the master branch with only small patches while
 working on the next release in a separate branch. 

How do the diagrams help you visualize the branch structure?
 The diagram shows the common root of the branches and which changes were made in
 both branches since they were split, so differences between the branches can be
 understood.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

 Pro: Fast; not tedious and error prone as manual
 Con: I can't be sure that conflicts are always identified correctly. Will the 
 automatic mode be able to identify all dependencies correctly?
